package controller;

import database.DBContact;
import database.DBReport;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.Stage;
import model.Appointment;
import model.Contact;
import model.ReportCountry;
import model.ReportTypeMonth;

import java.io.IOException;
import java.net.URL;
import java.time.LocalDateTime;
import java.util.ResourceBundle;

/**
 * Controller class that allows to display 3 different type of reports in table views created in the <code>ReportForm</code> FXML file.
 * <p>
 * It implements the <code>Initializable</code> interface.
 *
 * @author Myriam Drouin-Sagar
 */
public class ReportForm implements Initializable {

    public TableView<ReportTypeMonth> typeMonthTableView;
    public TableColumn<ReportTypeMonth, String> monthCol;
    public TableColumn<ReportTypeMonth, String> typeCol;
    public TableColumn<ReportTypeMonth, Integer> totalCol;
    public TableView<Appointment> appointmentTableView;
    public TableColumn<Appointment, Integer> appointmentIdCol;
    public TableColumn<Appointment, String> titleCol;
    public TableColumn<Appointment, String> descriptionCol;
    public TableColumn<Appointment, LocalDateTime> startCol;
    public TableColumn<Appointment, String> appointmentTypeCol;
    public TableColumn<Appointment, LocalDateTime> endCol;
    public TableColumn<Appointment, Integer> customerIdCol;

    public ComboBox<Contact> contactCombo;
    public Button exitButton;
    public TableView<ReportCountry> totalCountryTableView;
    public TableColumn<ReportCountry, String> countryCol;
    public TableColumn<ReportCountry, Integer> totalCountryCol;

    /**
     * Populates the table view for the report presenting the schedule for the chosen contact.
     * <p>
     * When the user makes a selection in the combo box (contactCombo), it gets the ID of the contact object and passes it as an argument to call the <code>appointmentByContactId()</code> method from the <code>DBReport</code> class.
     * The list returned by this method populates the table view (appointmentTableView).
     * @param actionEvent event generated by the contactCombo combo box when a user selects a contact (never used)
     */
    public void onContactCombo(ActionEvent actionEvent) {
        if(contactCombo.getSelectionModel().getSelectedItem() != null){
            int contactID = contactCombo.getSelectionModel().getSelectedItem().getContactId();
            appointmentTableView.setItems(DBReport.appointmentByContactId(contactID));
        }
    }

    /**
     * Cancels the <code>ReportForm</code> and redirects the user to the Appointment Scheduling.
     *
     * @param actionEvent event generated by the exitButton when the user clicks on the button labeled "Back to Schedule"
     * @throws IOException from the FXMLLoader
     */
    public void onExitButton(ActionEvent actionEvent) throws IOException {
        Parent root = FXMLLoader.load(getClass().getResource("/view/AppointmentView.fxml"));
        Stage stage = (Stage) ((Button) actionEvent.getSource()).getScene().getWindow();
        Scene scene = new Scene(root, 1260, 600);
        stage.setTitle("Appointments Scheduling");
        stage.setScene(scene);
        stage.show();
    }

    /**
     * Populates the table view of 2 reports and the contactCombo combo box.
     * <p>
     * First method to run in this class when the FMLLoader calls the <code>ReportForm</code> FXML file.
     * <p>
     * The 2 table views are populated by calling the <code>getTypeMonthList()</code> and <code>customerByCountry()</code> methods from the <code>DBReport</code> class.
     * The combo box is populated by calling the <code>getAllContacts()</code> method from the <code>DBContact</code> class.
     *
     * @param url location used to retrieve relative paths for root object
     * @param resourceBundle resources used to localize the root object
     */
    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        typeMonthTableView.setItems(DBReport.getTypeMonthList());
        totalCountryTableView.setItems(DBReport.customerByCountry());

        ObservableList<Contact> allContacts = DBContact.getAllContacts();
        contactCombo.setItems(allContacts);

        monthCol.setCellValueFactory(new PropertyValueFactory<>("MonthString"));
        typeCol.setCellValueFactory(new PropertyValueFactory<>("type"));
        totalCol.setCellValueFactory(new PropertyValueFactory<>("count"));

        appointmentIdCol.setCellValueFactory(new PropertyValueFactory<>("appointmentId"));
        titleCol.setCellValueFactory(new PropertyValueFactory<>("title"));
        descriptionCol.setCellValueFactory(new PropertyValueFactory<>("description"));
        appointmentTypeCol.setCellValueFactory(new PropertyValueFactory<>("type"));
        startCol.setCellValueFactory(new PropertyValueFactory<>("StartingString"));
        endCol.setCellValueFactory(new PropertyValueFactory<>("EndingString"));
        customerIdCol.setCellValueFactory(new PropertyValueFactory<>("customerId"));

        countryCol.setCellValueFactory(new PropertyValueFactory<>("countryName"));
        totalCountryCol.setCellValueFactory(new PropertyValueFactory<>("count"));


    }



}
