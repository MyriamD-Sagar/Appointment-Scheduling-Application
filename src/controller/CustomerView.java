package controller;

import database.DBAppointment;
import database.DBCustomer;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.Stage;
import model.Appointment;
import model.Country;
import model.Customer;

import utils.DisplayAlert;

import java.io.IOException;
import java.net.URL;
import java.sql.SQLException;

import java.util.Optional;
import java.util.ResourceBundle;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * Controller class that allows the user to see customers' information in a table view and to delete customers from the database.
 * <p>
 * Implements the <code>Initializable</code> interface.
 *
 * @author Myriam Drouin-Sagar
 */
public class CustomerView implements Initializable {


    public TableView<Customer> customerTableView;
    public TableColumn<Customer, Integer> idCol;
    public TableColumn<Customer, String> nameCol;
    public TableColumn<Customer, String> addressCol;
    public TableColumn<Customer, String> postalCodeCol;
    public TableColumn<Customer, String> phoneCol;
    public TableColumn<Customer, Integer> divisionCol;
    public TableColumn<Country, String> countryCol;

    public static Customer selectedCustomer;
    public Button exitButton;
    public Button addCustomerButton;
    public Button updateCustomerButton;
    public Button deleteCustomerButton;

    public static Customer getSelectedCustomer() {
        return selectedCustomer;
    }


    /**
     * Redirects the user to the <code>AddCustomerForm</code> by loading the <code>AddCustomerForm</code> FXML file.
     *
     * @param actionEvent event generated when the user clicks on the addCustomerButton
     * @throws IOException from the FXMLLoader
     */
    public void onAddCustomer(ActionEvent actionEvent) throws IOException {
        Parent root = FXMLLoader.load(getClass().getResource("/view/AddCustomerForm.fxml"));
        Stage stage = (Stage) ((Button) actionEvent.getSource()).getScene().getWindow();
        Scene scene = new Scene(root, 650, 500);
        stage.setTitle("Add Customer Form");
        stage.setScene(scene);
        stage.show();
    }

    /**
     * Redirects the user to the <code>UpdateCustomerForm</code>.
     * <p>
     * Loads the <code>UpdateCustomerForm</code> FXML file if the selectedUser object is not null, otherwise a WARNING dialog box is displayed in the user interface.
     * @param actionEvent event generated by the updateCustomerButton when clicked by the user
     * @throws IOException from the FXMLLoader
     */
    public void onUpdateCustomer(ActionEvent actionEvent) throws IOException {
        selectedCustomer = customerTableView.getSelectionModel().getSelectedItem();
        if (selectedCustomer != null) {
            Parent root = FXMLLoader.load(getClass().getResource("/view/UpdateCustomerForm.fxml"));
            Stage stage = (Stage) ((Button) actionEvent.getSource()).getScene().getWindow();
            Scene scene = new Scene(root, 650, 500);
            stage.setTitle("Add Customer Form");
            stage.setScene(scene);
            stage.show();
        }
        else {
            Alert alert = DisplayAlert.alertDisplay(Alert.AlertType.WARNING, "No Customer Selected", "Please select a customer to update.");
            alert.showAndWait();

        }

    }

    /**
     * Removes a customer and its associated appointment(s) from the database and implements a Lambda Expression to filter a list of Appointment objects.
     * <p>
     * If a user is selected from the table view, the lambda expression is implemented.
     * <p>
     * LAMBDA EXPRESSION EXPLANATION/JUSTIFICATION:
     * This lambda expression filters the list of allAppointments and fills an ObservableList (appointmentByCustomerId) with the Appointments objects that matches the selectedCustomer ID.
     * <p>
     * A personalized CONFIRMATION alert is displayed to let the user know about the appointment(s) found in the database that are associated with the selectedCustomer.
     * If the user confirms, first the associated appointment(s) (if any) are deleted from the database by calling the <code>deleteAppointmentCustomer()</code> method from the <code>DBAppointment</code> class and passing the selectedCustomer ID as an argument.
     * Then, the customer is deleted from the database by calling the <code>deleteCustomer()</code> method from the <code>DBCustomer</code> class and passing the selectedCustomer ID as an argument.
     * <p>
     * Displays a personalized INFORMATION dialog box to the user interface when customer and/or appointment(s) are deleted.
     * @param actionEvent event generated when the user clicks on the deleteCustomerButton (never used)
     * @throws SQLException database access errors
     */
    public void onDeleteCustomer(ActionEvent actionEvent) throws SQLException {

        selectedCustomer = customerTableView.getSelectionModel().getSelectedItem();

        String header;
        String context;

        if(selectedCustomer == null){
            Alert alert = DisplayAlert.alertDisplay(Alert.AlertType.WARNING, "No Customer Selected", "Please select a customer to delete.");
            alert.showAndWait();
        }

        if (selectedCustomer != null) {
            int id = selectedCustomer.getCustomerId();
            ObservableList<Appointment> allAppointments = DBAppointment.getAllAppointments();
            Stream<Appointment> appointmentList = allAppointments.stream().filter(a -> a.getCustomerId() == id);
            ObservableList<Appointment> appointmentByCustomerId = appointmentList.collect(Collectors.toCollection(FXCollections :: observableArrayList));

            if (appointmentByCustomerId.size() > 0) {
                header = "The following customer is associated with [" + appointmentByCustomerId.size() + "] appointment(s) in the system." +
                        "\nCustomer ID: " + id +
                        "\nCustomer Name: " + selectedCustomer.getCustomerName();
                context = "Are you sure you want to delete this customer and its associated appointment(s) from the system?";
            } else {
                header = "The following customer has no appointment in the system." +
                        "\nCustomer ID: " + id +
                        "\nCustomer Name: " + selectedCustomer.getCustomerName();
                context = "Are you sure you want to delete this customer from the Customer Records?";
            }
            Alert alertConfirmation = DisplayAlert.alertDisplay(Alert.AlertType.CONFIRMATION, header, context);
            Optional<ButtonType> showResult = alertConfirmation.showAndWait();
            if (showResult.isPresent() && showResult.get() == ButtonType.OK) {
                for (Appointment appointment : appointmentByCustomerId) {
                    DBAppointment.deleteAppointmentCustomer(id);
                    Alert alertInfo = DisplayAlert.alertDisplay(Alert.AlertType.INFORMATION, "The following appointment was successfully deleted\nfrom the Appointment Scheduling System.",
                            "Appointment ID: " + appointment.getAppointmentId() +
                                    "\nAppointment Type: " + appointment.getType());
                    alertInfo.showAndWait();
                }
                DBCustomer.deleteCustomer(id);
                ObservableList<Customer> refreshCustomers = DBCustomer.getAllCustomers();
                customerTableView.setItems(refreshCustomers);
                Alert alertInfo2 = DisplayAlert.alertDisplay(Alert.AlertType.INFORMATION, "The following customer was successfully deleted\nfrom the Customer Records",
                        "Customer ID: " + id + "\nCustomer Name: " + selectedCustomer.getCustomerName());

                alertInfo2.showAndWait();
            }
        }

    }

    /**
     * Redirects the user to the <code>AppointmentView</code>.
     * Loads the <code>AppointmentView</code> FXML file.
     *
     * @param actionEvent event generated when the user clicks on the exitButton labeled as "Back to Schedule"
     * @throws IOException from the FXMLLoader
     */
    public void onExit (ActionEvent actionEvent) throws IOException {
            Parent root = FXMLLoader.load(getClass().getResource("/view/AppointmentView.fxml"));
            Stage stage = (Stage) ((Button) actionEvent.getSource()).getScene().getWindow();
            Scene scene = new Scene(root, 1260, 600);
            stage.setTitle("Appointments Scheduling");
            stage.setScene(scene);
            stage.show();
        }

    /**
     * Populates the customer table view.
     * <p>
     * First method to run in this class when the FMLLoader calls the <code>CustomerView</code> FXML file.
     * <p>
     * The table view (customerTableView) is populated by calling the <code>getAllCustomers()</code> method from the <code>DBCustomer</code> class.
     * @param url location used to retrieve relative paths for root object
     * @param resourceBundle resources used to localize the root object
     */
    @Override
        public void initialize (URL url, ResourceBundle resourceBundle){

            customerTableView.setItems(DBCustomer.getAllCustomers());

            idCol.setCellValueFactory(new PropertyValueFactory<>("customerId"));
            nameCol.setCellValueFactory(new PropertyValueFactory<>("customerName"));
            addressCol.setCellValueFactory(new PropertyValueFactory<>("address"));
            postalCodeCol.setCellValueFactory(new PropertyValueFactory<>("postalCode"));
            phoneCol.setCellValueFactory(new PropertyValueFactory<>("phone"));
            divisionCol.setCellValueFactory(new PropertyValueFactory<>("divisionName"));
            countryCol.setCellValueFactory(new PropertyValueFactory<>("countryName"));


        }


}

