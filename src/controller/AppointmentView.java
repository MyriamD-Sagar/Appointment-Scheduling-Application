package controller;

import database.DBAppointment;
import javafx.event.ActionEvent;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.Stage;
import model.Appointment;
import model.Contact;
import utils.DisplayAlert;
import utils.Filter;

import java.io.IOException;
import java.net.URL;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.util.Locale;
import java.util.Optional;
import java.util.ResourceBundle;

/**
 * Controller class that allows the user to see appointment schedules in the form of a table view and to delete appointments from the database.
 * <p>
 * This is the "main form" of the Application Scheduling System, because it also allows the user to navigate to different forms of the application.
 * <p>
 * Implements the <code>Initializable</code> interface.
 *
 * @author Myriam Drouin-Sagar
 */
public class AppointmentView implements Initializable {

    public TableView<Appointment> appointmentTableView;
    public TableColumn<Appointment, Integer> appointmentIdCol;
    public TableColumn<Appointment, String> titleCol;
    public TableColumn<Appointment, String> descriptionCol;
    public TableColumn<Appointment, String> locationCol;
    public TableColumn<Contact, String> contactCol;
    public TableColumn<Appointment, String> typeCol;
    public TableColumn<Appointment, LocalDateTime> startDTCol;
    public TableColumn<Appointment, LocalDateTime> endDTCol;
    public TableColumn<Appointment, Integer> customerIdCol;
    public TableColumn<Appointment, Integer> userIdCol;
    public Button addAppointmentButton;
    public Button updateAppointmentButton;
    public Button deleteAppointmentButton;
    public RadioButton viewAllRadio;
    public RadioButton viewMonthRadio;
    public RadioButton viewWeekRadio;
    public ToggleGroup viewToggle;
    public Button customerViewButton;
    public Button reportViewButton;
    public Button logoutButton;
    public static Appointment selectedAppointment;
    public static Appointment getSelectedAppointment(){
        return selectedAppointment;
    }
    private final ResourceBundle rb = ResourceBundle.getBundle("resources/Languages", Locale.getDefault());

    /**
     * Updates or populates the information in the table view (appointmentTableView) by calling the <code>getAllAppointments()</code> method from the <code>DBAppointment</code> class.
     */
    private void refreshAppointmentView(){
        appointmentTableView.setItems(DBAppointment.getAllAppointments());
    }

    /**
     * Populates the table view (appointmentTableView) by calling the <code>refreshAppointmentView()</code> method.
     * Radio button to display all the appointments in the table view.
     * @param actionEvent event generated by the viewAllRadio radio button when selected by the user (never used)
     */
    public void onViewAllRadio(ActionEvent actionEvent) {
       refreshAppointmentView();

    }

    /**
     * Populates the table view (appointmentTableView) by calling the <code>monthAppointment()</code> method from the <code>Filter</code> class.
     * Radio Button to only display the appointments in the current month.
     * @param actionEvent event generated by the viewMonthRadio radio button when selected by the user (never used)
     */
    public void onViewMonthRadio(ActionEvent actionEvent) {
        appointmentTableView.setItems(Filter.monthAppointments());

    }

    /**
     * Populates the table view (appointmentTableView) by calling the <code>weekAppointment()</code> method from the <code>Filter</code> class.
     * Radio Button to only display the appointments in the current week.
     * @param actionEvent event generated by the viewWeekRadio radio button when selected by the user (never used)
     */
    public void onViewWeekRadio(ActionEvent actionEvent) {
        appointmentTableView.setItems(Filter.weekAppointments());

    }

    /**
     * Redirects the user to the <code>LoginForm</code>.
     * Displays a CONFIRMATION dialog box to the user when the logoutButton is clicked.
     * If confirmed, it loads the <code>LoginForm</code> FXML file.
     * @param actionEvent event generated by the logoutButton when clicked by the user
     * @throws IOException from the FXMLLoader
     */
    public void onLogout(ActionEvent actionEvent) throws IOException {
        Alert alertConfirmation = new Alert(Alert.AlertType.CONFIRMATION, "Are you sure you want to Logout from the Desktop Scheduling Application?");
        Optional<ButtonType> showResult = alertConfirmation.showAndWait();
        if(showResult.isPresent() && showResult.get() == ButtonType.OK) {
            Parent root = FXMLLoader.load(getClass().getResource("/view/LoginForm.fxml"));
            Stage stage = (Stage) ((Button) actionEvent.getSource()).getScene().getWindow();
            Scene scene = new Scene(root, 400, 400);
            stage.setTitle(rb.getString("LoginForm"));
            stage.setScene(scene);
            stage.show();
        }
    }

    /**
     * Redirects the user to the <code>CustomerView</code>.
     * Loads the <code>CustomerView</code> FXML file.
     * @param actionEvent event generated by the customerViewButton when clicked by the user
     * @throws IOException from the FXMLLoader
     */
    public void onCustomerView(ActionEvent actionEvent) throws IOException {
        Parent root = FXMLLoader.load(getClass().getResource("/view/CustomerView.fxml"));
        Stage stage = (Stage) ((Button) actionEvent.getSource()).getScene().getWindow();
        Scene scene = new Scene(root, 932, 502);
        stage.setTitle("Customer Records");
        stage.setScene(scene);
        stage.show();
    }

    /**
     * Redirects the user to the <code>ReportForm</code>.
     * Loads the <code>ReportForm</code> FXML file.
     * @param actionEvent event generated by the reportViewButton when clicked by the user
     * @throws IOException from the FXMLLoader
     */
    public void onReportView(ActionEvent actionEvent) throws IOException {
        Parent root = FXMLLoader.load(getClass().getResource("/view/ReportForm.fxml"));
        Stage stage = (Stage) ((Button) actionEvent.getSource()).getScene().getWindow();
        Scene scene = new Scene(root, 950, 800);
        stage.setTitle("Reports Form");
        stage.setScene(scene);
        stage.show();
    }

    /**
     * Redirects the user to the <code>AddAppointmentForm</code>.
     * Loads the <code>AddAppointmentForm</code> FXML file.
     * @param actionEvent event generated by the addAppointmentButton when clicked by the user
     * @throws IOException from the FXMLLoader
     */
    public void onAddAppointment(ActionEvent actionEvent) throws IOException {
        Parent root = FXMLLoader.load(getClass().getResource("/view/AddAppointmentForm.fxml"));
        Stage stage = (Stage)((Button)actionEvent.getSource()).getScene().getWindow();
        Scene scene = new Scene(root, 712, 500);
        stage.setTitle("Add Appointment Form");
        stage.setScene(scene);
        stage.show();
    }

    /**
     * Redirects the user to the <code>UpdateAppointmentForm</code>.
     * <p>
     * Loads the <code>UpdateAppointmentForm</code> FXML file if the selectedAppointment object is not null, otherwise a WARNING dialog box is displayed in the user interface
     * @param actionEvent event generated by the updateAppointmentButton when clicked by the user
     * @throws IOException from the FXMLLoader
     */
    public void onUpdateAppointment(ActionEvent actionEvent) throws IOException {
        selectedAppointment = appointmentTableView.getSelectionModel().getSelectedItem();
        if(selectedAppointment != null) {
            Parent root = FXMLLoader.load(getClass().getResource("/view/UpdateAppointmentForm.fxml"));
            Stage stage = (Stage) ((Button) actionEvent.getSource()).getScene().getWindow();
            Scene scene = new Scene(root, 712, 500);
            stage.setTitle("Update Appointment Form");
            stage.setScene(scene);
            stage.show();
        }
        else {
            Alert alert = DisplayAlert.alertDisplay(Alert.AlertType.WARNING, "No appointment selected","Please select an appointment to update.");
            alert.showAndWait();
        }

    }

    /**
     * Removes an appointment's information from the database.
     * <p>
     * If an appointment is selected from the appointmentTableView, a personalized CONFIRMATION dialog box is displayed.
     * If confirmed, the <code>deleteAppointment()</code> method is called from the <code>DBAppointment</code> class by passing the selectedAppointment ID as an argument.
     * <p>
     * Displays a personalized INFORMATION dialog box to the user interface when an appointment is successfully deleted from the database.
     * <p>
     * Once the appointment is deleted, a call to the <code>refreshAppointmentView()</code> method is made to update the table view (appointmentTableView).
     * @param actionEvent event generated when the user clicks on the deleteAppointmentButton (never used)
     * @throws SQLException database access errors
     */
    public void onDeleteAppointment(ActionEvent actionEvent) throws SQLException {
        selectedAppointment = appointmentTableView.getSelectionModel().getSelectedItem();
        if(selectedAppointment != null){
            Alert alertConfirmation = DisplayAlert.alertDisplay(Alert.AlertType.CONFIRMATION,"Are you sure you want to delete the following appointment\nfrom the Appointment Scheduling System?",
                    "Appointment ID: "+ selectedAppointment.getAppointmentId() +
                            "\nAppointment Type: " + selectedAppointment.getType());
            Optional<ButtonType> showResult = alertConfirmation.showAndWait();
            if(showResult.isPresent() && showResult.get() == ButtonType.OK) {
                DBAppointment.deleteAppointment(selectedAppointment.getAppointmentId());
                refreshAppointmentView();
                Alert alertInfo = DisplayAlert.alertDisplay(Alert.AlertType.INFORMATION,"The following appointment was successfully deleted\nfrom the Appointment Scheduling System.",
                        "Appointment ID: "+ selectedAppointment.getAppointmentId() +
                                "\nAppointment Type: " + selectedAppointment.getType());
                alertInfo.showAndWait();
            }
        }
        else {
            Alert alertWarning = DisplayAlert.alertDisplay(Alert.AlertType.WARNING, "No appointment selected", "Please select an appointment to delete.");
            alertWarning.showAndWait();
        }

    }

    /**
     * Populates the Appointment Scheduling table view.
     * <p>
     * First method to run in this class when the FMLLoader calls the <code>AppointmentView</code> FXML file.
     * <p>
     * The table view (appointmentTableView) is populated by calling the <code>refreshAppointmentView</code> method.
     * Sets the initial toggle selection as the radio button viewAllRadio to display all the appointments when the user open the <code>AppointmentView</code>.
     * @param url location used to retrieve relative paths for root object
     * @param resourceBundle resources used to localize the root object
     */
    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        viewToggle.selectToggle(viewAllRadio);
        refreshAppointmentView();
        appointmentIdCol.setCellValueFactory(new PropertyValueFactory<>("appointmentId"));
        titleCol.setCellValueFactory(new PropertyValueFactory<>("title"));
        descriptionCol.setCellValueFactory(new PropertyValueFactory<>("description"));
        locationCol.setCellValueFactory(new PropertyValueFactory<>("location"));
        contactCol.setCellValueFactory(new PropertyValueFactory<>("contactName"));
        typeCol.setCellValueFactory(new PropertyValueFactory<>("type"));
        startDTCol.setCellValueFactory(new PropertyValueFactory<>("StartingString"));
        endDTCol.setCellValueFactory(new PropertyValueFactory<>("EndingString"));
        customerIdCol.setCellValueFactory(new PropertyValueFactory<>("customerId"));
        userIdCol.setCellValueFactory(new PropertyValueFactory<>("userId"));

        }



}
